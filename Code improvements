// code improvement(working away from home)

            if(myUnit.getType() == UnitType.Terran_Vulture && myUnit.isAttacking() == true){
            //Thanks to Ravaelle's bot https://github.com/Ravaelles/Atlantis
            	System.out.println("Launch");
            	Unit unitt = myUnit;
              Unit targett = myUnit.getTarget();
              int distance = 0.2;
              int TargetDistance = unit.getDistance(targett);
              double ratio = 1.2 / TargetDistance;
              int finalvalue = TargetDistance + distance;
            	System.out.println("Vulture");
            	System.out.println("Target");
               double valueX = targett.getX() - unitt.getX();
               double valueY = targett.getY() - unitt.getY();
              Position move = new Position((int) (unitt.getX() - finalvalue * valueX), (int) (unitt.getY() - ratio * valueY));
            	System.out.println("Call");
            	if(Move.isValid() == true) {
            		System.out.println("Valid");
            		unitt.move(Move);
            		System.out.println("move");
            	}
            	System.out.println("Not valid");
}


public Position getRetreatPos(Unit unitt, Unit targett){
//Thanks to Ravaelle's bot https://github.com/Ravaelles/Atlantis
int distance = 0.2;
int TargetDistance = unit.getDistance(targett);
int finalvalue = TargetDistance + distance;
double valueX = targett.getX() - unitt.getX();
double valueY = targett.getY() - unitt.getY();
Position move = new Position((int) (unitt.getX() - finalvalue * valueX), (int) (unitt.getY() - ratio * valueY));
if(move.isValid() == true && move != null){
return move;
}
else
{
return null;
}
return null;
}

           if(myUnit.getType() == UnitType.Terran_Vulture && myUnit.isAttacking() == true){
            	System.out.println("Launch");
            	Unit unitt = myUnit;
            	System.out.println("Vulture");
            	Unit targett = myUnit.getTarget();
            	System.out.println("Target");
           	    Position fp1 =  new Position(unitt.getX() - targett.getX(), unitt.getY() - targett.getY());
        	    Position fp2 =  new Position(unitt.getX(), unitt.getY());
        	    Position fp3 = new Position(fp1.getX() + fp2.getX(), fp1.getY() + fp2.getY());
        	    Position Move = fp3;
            	System.out.println("Call");
            	if(Move.isValid() == true) {
            		System.out.println("Valid");
            		unitt.move(Move);
            		System.out.println("move");
            	}
            	System.out.println("Not valid");
}



public Position getJukePos(Unit unitt, Unit targett){
//Thanks to Ravaelle's bot https://github.com/Ravaelles/Atlantis
Position fp1 =  new Position(unitt.getX() - targett.getX(), unitt.getY() - targett.getY());
Position fp2 =  new Position(unitt.getX(), unitt.getY());
Position fp3 = new Position(fp1.getX() + fp2.getX(), fp1.getY() + fp2.getY());
Position Move = fp3;
if(move.isValid() == true && move != null){
return move;
}
else
{
return null;
}
return null;
}

ArrayList<Unit> myMinerals = new ArrayList<Unit>();

// When CC is complete

for(Unit minerals : BWTA.getNearestBaseLocation(pos).getMinerals()){
   if(myMinerals.contains(minerals) == false){
      myMinerals.add(minerals);
   }
   

}

// New gathering script

if (myUnit.getType().isWorker() && myUnit.isIdle() && myUnit.isGatheringGas() == false && myUnit.getID() != scoutID) {
		Unit closestMineral = null;
			for (Unit neutralUnit : myMinerals) {
              if (closestMineral == null || myUnit.getDistance(neutralUnit) < myUnit.getDistance(closestMineral)) {
					closestMineral = neutralUnit;
                if (closestMineral != null) {
					myUnit.gather(closestMineral, false);
				                    }
                   }
			}
}



public Position Regroup(){
   int X;
   int Y;
   int index = 0;
   int max = myUnits.size();
  for(Unit unit : myUnits){
    index = index + 1;
    int unitX = unit.getX();
    int unitY = unit.getY();  
    X = X - unitX / myUnits.size();
    Y = Y - unitY / myUnits.size();
    
    if(index >= max){
      Position pos = new Position(X, Y)
        if(pos.isValid() == false){
        pos.makeValid();
        return pos;
        }
      return pos;
      
      
    }
    
    
  }
  
  
  return null;
  
  
}




